# build.yml
on:
  pull_request:
    paths:
    - app/**
  push:
    paths:
    - app/**
    branches:         # array of glob patterns matching against refs/heads. Optional; defaults to all
    - main            # triggers on pushes that contain changes in master
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


name: Build and Push to ECR

# https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html
env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEFAULT_OUTPUT: json
  #AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY: kitty
  IMAGE_TAG: latest
   
jobs:
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install Cosign
      uses: sigstore/cosign-installer@main

    - name: Build, tag, push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        
      run: |
        echo '__________________________________________________________________________'
        echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
        echo '__________________________________________________________________________'
        
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: place the cosign private key in a file
      env:
        COSIGN_KEY: ${{secrets.COSIGN_KEY}}

      run: echo '-----BEGINENCRYPTEDCOSIGNPRIVATEKEY----- eyJrZGYiOnsibmFtZSI6InNjcnlwdCIsInBhcmFtcyI6eyJOIjozMjc2OCwiciI6OCwicCI6MX0sInNhbHQiOiJrWTRXSnNNUXVWdnExakg0NUM1VWk2bHdtVWNGdFhQanVDK09TV0NlM2gwPSJ9LCJjaXBoZXIiOnsibmFtZSI6Im5hY2wvc2VjcmV0Ym94Iiwibm9uY2UiOiIveDdBSGpGbFhBQzk1anFaT2lzQ1F1QVZHUkZ3V2cyNSJ9LCJjaXBoZXJ0ZXh0IjoiZ1FqU3RualNNbDJPVERHckdMWVA1T2xjb0h4S2JIOFpRbVE3ZTlVTjg5SlhIVlZnVGJTc05uQ3FuR00xWlcxZmM5ME04c3FYUDJBUGVTUXZibjgybGNnTVdKVkxnRXdpMEdvYVUyYTE5NnJBaE85TW9sNlJIV2E0RlFJa08zTGNDR21ld3Myb01oWFJhVDN4TmtaWmYrU1RWeFBXbmVWR1U3Ym9pTGpKRnh5Z2JYdmFzZ3N4OWhwczhld25BbFQ4cE1CVENQUG93WXdvUUE9PSJ9 -----ENDENCRYPTEDCOSIGNPRIVATEKEY-----' > /tmp/cosign.key
      #shell: bash
        
    - name: Sign the image pushed
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: kitty
        IMAGE_TAG: latest
      run: |
        cat /tmp/cosign.key
        echo -n hello123 | cosign sign --key /tmp/cosign.key $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
