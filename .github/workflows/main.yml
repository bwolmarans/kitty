# works, even the deployment, at long last
#
# it turns out, that whole "set image" thing requires an existing deployment, but then, if the container hans't changed, it still errors out, so better to just apply -f a whole new deployment yaml
#
# build, push, sign, and deploy to the cluster... 
# todo: would like to get kyverno or gatekeeper working properly in here at some point to verify the signature before deploying
#
on:
  #pull_request:
  #  paths:
  #  - app/**
  #push:
  #  paths:
  #  - app/**
  #  branches:         # array of glob patterns matching against refs/heads. Optional; defaults to all
  #  - main            # triggers on pushes that contain changes in master
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


name: Enchilada

# https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html
env:
  AWS_DEFAULT_REGION: us-west-2
  AWS_DEFAULT_OUTPUT: json
  #AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY: kitty
  IMAGE_TAG: latest
   
jobs:
  build:
    
    name: Do a bunch of stuff
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install Cosign
      uses: sigstore/cosign-installer@main

    - name: Build, Tag, push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ./app
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
    
    - name: sign with cosign
      env:
        COSIGN_KEY: ${{secrets.COSIGN_KEY}}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

      run: |
        echo "$COSIGN_KEY" > /tmp/cosign.key
        cat /tmp/cosign.key
        echo -n "${{secrets.COSIGN_PASSWORD}}" | cosign sign --key /tmp/cosign.key $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
    
    - name: Set current current time as env variable "currentdateandtime"
      id: whatsthetime
      run: echo "::set-output name=currentdateandtime::$(date +'%Y-%m-%dT%H:%M:%S')"
        
    - name: Echo current date and time
      run: echo ${{ steps.whatsthetime.outputs.currentdateandtime }}
        
    - name: notify Sysdig
      id: myRequest
      env:
        #POST_DATA: '{ "events": [ { "timestamp": "${{ steps.whatsthetime.outputs.currentdateandtime }}", "rule": "Check image signature", "priority": "warning", "output": "The image signature verification failed for $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}", "source": "Kyverno AC", "tags": [ "foo", "bar" ],      "output_fields": { "registry_name": "${{ env.ECR_REGISTRY }}", "repository_name": "${{ env.ECR_REPOSITORY }}", "image_tag": "${{ env.IMAGE_TAG }}" } } ], "labels": { "label1": "label1-value", "label2": "label2-value" } } '       
        POST_DATA: '{ "events": [ { "timestamp": "2022-01-31T13:44:05+00:00", "rule": "Check image signature", "priority": "warning", "output": "The image signature verification failed for image {{imagename}}", "source": "Connaisseur AC", "tags": [ "foo", "bar" ], "output_fields": { "field1": "value1", "field2": "value2" } } ], "labels": { "label1": "label1-value", "label2": "label2-value" } }'

      uses: fjogeleit/http-request-action@master
      with:
        url: 'https://us2.app.sysdig.com/api/v1/eventsDispatch/ingest'
        method: 'POST'
        bearerToken: ${{ secrets.SYSDIG_API_TOKEN }}
        data: '{ "events": [ { "timestamp": "2022-01-31T13:44:05+00:00", "rule": "Check image signature", "priority": "warning", "output": "The image signature verification failed for image {{imagename}}", "source": "Connaisseur AC", "tags": [ "foo", "bar" ], "output_fields": { "field1": "value1", "field2": "value2" } } ], "labels": { "label1": "label1-value", "label2": "label2-value" } }'
        
    - name: Show Response
      run: echo ${{ steps.myRequest.outputs.response }}
    
    - name: update container in pod kitty 
      id: kubectl
      uses: ianbelcher/eks-kubectl-action@master
      with:
        cluster_name: kitty
        args: set image --record deployment/kitty kitty=latest
    
    - name: Use the output
      run: echo "{{ steps.kubectl.outputs.kubectl-out }}"
